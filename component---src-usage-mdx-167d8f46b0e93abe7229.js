(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{HVoQ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return r}));var s=n("Fcif"),a=n("+I+c"),b=n("/FXl"),c=n("TjRS"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/usage.mdx"}});var i={_frontmatter:o},l=c.a;function r(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(b.b)(l,Object(s.a)({},i,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h1",{id:"basic-usage"},"Basic Usage"),Object(b.b)("h2",{id:"import-package"},"Import package"),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"import DXClient from '@dxfeed/widgets-api'\n")),Object(b.b)("h2",{id:"configure--create-connection"},"Configure & Create connection"),Object(b.b)("p",null,"Create instance of DXClient and set web socket address and open connection."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"import DXClient from '@dxfeed/widgets-api'\n\nconst client = new DXClient('wss://CLIENT_NAME.dxfeed.com/api/rsocket')\n")),Object(b.b)("h2",{id:"configure--create-subscription"},"Configure & Create subscription"),Object(b.b)("p",null,"You should specify the record and the requested symbols."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"import { QuoteSubscription } from '@dxfeed/widgets-api/records/Quote'\n\nconst subscription = await client.subscribe(\n  new QuoteSubscription(\n    ['AAPL'] /* symbols */\n  )\n)\n")),Object(b.b)("p",null,"The full list of records can be found here:"),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"import { /* Subscription */ } from '@dxfeed/widgets-api/records/*'\n")),Object(b.b)("p",null,"You can specify fields you want to request for each type of event. This can be achieved by passing a list of them as a second parameter of ",Object(b.b)("inlineCode",{parentName:"p"},"Subscription"),". If no value provided (i.e. parameter is ",Object(b.b)("inlineCode",{parentName:"p"},"undefined"),"), a default set of fields will be requested. List of event types with all available fields for each of them can be found ",Object(b.b)("a",Object(s.a)({parentName:"p"},{href:"https://studio.asyncapi.com/?url=https://dxfeed-demo.s3.amazonaws.com/dxFeed-WebApi-alpha.yaml"}),"here"),"."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"client.subscribe(\n  new QuoteSubscription(\n    symbols,\n    ['eventSymbol', 'bidPrice'] /* fields */\n  )\n)\n")),Object(b.b)("p",null,"NOTE: ",Object(b.b)("inlineCode",{parentName:"p"},"eventSymbol")," field is mandatory for all types of events. If you want to request a subset of fields, you must include ",Object(b.b)("inlineCode",{parentName:"p"},"eventSymbol"),"."),Object(b.b)("p",null,"Some of the events may may be requested using timed subscription (i.e. with inclusion of historical data). These are: "),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Candle")," "),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Greeks")," "),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"TheoPrice")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"TimeAndSale")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Underlying"))),Object(b.b)("p",null,"For timed subscription you should also provide time to start subscription from."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"client.subscribe(\n  new CandleSubscription(\n    symbols,\n    fields,\n    1500000000000 /* from time */\n  )\n)\n")),Object(b.b)("p",null,"NOTE: for timed events requested with custom selection of fields, an ",Object(b.b)("inlineCode",{parentName:"p"},"eventFlags")," field is also mandatory."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"/* Timed subscription, requesting a default set of fields */\n\nclient.subscribe(\n  new CandleSubscription(\n    symbols,\n    undefined,\n    1500000000000\n  )\n)\n\n/* Timed subscription, requesting a custom set of fields */\n\nclient.subscribe(\n  new CandleSubscription(\n    symbols,\n    ['eventSymbol', 'eventFlags', 'high', 'low'],\n    1500000000000\n  )\n)\n")),Object(b.b)("h2",{id:"change-symbols-in-subscription"},"Change symbols in subscription"),Object(b.b)("h3",{id:"add-symbols"},"Add symbols"),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"subscription.addSymbols(['MSFT'])\n")),Object(b.b)("h3",{id:"remove-symbols"},"Remove symbols"),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"subscription.removeSymbols(['AAPL'])\n")),Object(b.b)("h2",{id:"get-events-from-stream"},"Get events from stream"),Object(b.b)("p",null,"After an open subscription, you can listen to events from the stream."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"const stream = subscription.getStream()\n\nstream.subscribe({\n  onSubscribe: sub => {\n    sub.request(Number.MAX_SAFE_INTEGER) // set backpressure\n  },\n  onNext: handleEvents,\n})\n")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"onNext")," its event handler for process incoming events."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"import { Quote } from '@dxfeed/widgets-api/records/Quote'\n\nconst handleEvents = (events: Quote[]) => {\n  /* process events */\n}\n")),Object(b.b)("h2",{id:"close-subscription-stream"},"Close subscription stream"),Object(b.b)("p",null,"All ",Object(b.b)("inlineCode",{parentName:"p"},"onSubscribe")," callbacks that are called with a subscription, you need to call the ",Object(b.b)("inlineCode",{parentName:"p"},"subs.close")," method to close the stream."),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"stream.subscribe({\n  onSubscribe: sub => {\n    setTimeout(() => sub.close(), 5000) // close after 5s\n  },\n  onNext: console.log,\n})\n")),Object(b.b)("h2",{id:"close-connection"},"Close connection"),Object(b.b)("p",null,"If you need to close the web socket connection"),Object(b.b)("pre",null,Object(b.b)("code",Object(s.a)({parentName:"pre"},{className:"language-ts"}),"client.close()\n")))}void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/usage.mdx"}}),r.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-usage-mdx-167d8f46b0e93abe7229.js.map