{"version":3,"sources":["webpack:///../src/usage.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2OAMaA,G,UAAe,S,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,iDAIL,iBAAQ,CACN,GAAM,gCADR,iCAGA,oGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4HAML,iBAAQ,CACN,GAAM,kCADR,mCAGA,iFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0LAUL,oEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yEAIL,mKAAkJ,0BAAYA,WAAW,KAAvB,gBAAlJ,6CAAwP,0BAAYA,WAAW,KAAvB,aAAxP,6HAA2a,6BAAGA,WAAW,KAAQ,CAC7b,KAAQ,mGAD+Z,QAA3a,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sHASL,8BAAa,0BAAYA,WAAW,KAAvB,eAAb,4GAAiL,0BAAYA,WAAW,KAAvB,eAAjL,KACA,+IACA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,KACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,UAApB,KACA,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBACpB,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,gBAEtB,wGACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yHAUL,6FAA4E,0BAAYA,WAAW,KAAvB,cAA5E,6BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uXAsBL,iBAAQ,CACN,GAAM,kCADR,kCAGA,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wCAIL,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2CAIL,iBAAQ,CACN,GAAM,0BADR,0BAGA,8FACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8LAWL,qBAAG,0BAAYA,WAAW,KAAvB,UAAH,mDACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0IAQL,iBAAQ,CACN,GAAM,6BADR,6BAGA,4BAAW,0BAAYA,WAAW,KAAvB,eAAX,wEAA2I,0BAAYA,WAAW,KAAvB,cAA3I,gCACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+IASL,iBAAQ,CACN,GAAM,oBADR,oBAGA,uEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2B,6LAQTJ,EAAWK,gBAAiB","file":"component---src-usage-mdx-167d8f46b0e93abe7229.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/dvpetrov/Workspace/dxfeed-js-api-poc/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h1>\n    <h2 {...{\n      \"id\": \"import-package\"\n    }}>{`Import package`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import DXClient from '@dxfeed/widgets-api'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure--create-connection\"\n    }}>{`Configure & Create connection`}</h2>\n    <p>{`Create instance of DXClient and set web socket address and open connection.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import DXClient from '@dxfeed/widgets-api'\n\nconst client = new DXClient('wss://CLIENT_NAME.dxfeed.com/api/rsocket')\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"configure--create-subscription\"\n    }}>{`Configure & Create subscription`}</h2>\n    <p>{`You should specify the record and the requested symbols.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { QuoteSubscription } from '@dxfeed/widgets-api/records/Quote'\n\nconst subscription = await client.subscribe(\n  new QuoteSubscription(\n    ['AAPL'] /* symbols */\n  )\n)\n`}</code></pre>\n    <p>{`The full list of records can be found here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { /* Subscription */ } from '@dxfeed/widgets-api/records/*'\n`}</code></pre>\n    <p>{`You can specify fields you want to request for each type of event. This can be achieved by passing a list of them as a second parameter of `}<inlineCode parentName=\"p\">{`Subscription`}</inlineCode>{`. If no value provided (i.e. parameter is `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`), a default set of fields will be requested. List of event types with all available fields for each of them can be found `}<a parentName=\"p\" {...{\n        \"href\": \"https://studio.asyncapi.com/?url=https://dxfeed-demo.s3.amazonaws.com/dxFeed-WebApi-alpha.yaml\"\n      }}>{`here`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`client.subscribe(\n  new QuoteSubscription(\n    symbols,\n    ['eventSymbol', 'bidPrice'] /* fields */\n  )\n)\n`}</code></pre>\n    <p>{`NOTE: `}<inlineCode parentName=\"p\">{`eventSymbol`}</inlineCode>{` field is mandatory for all types of events. If you want to request a subset of fields, you must include `}<inlineCode parentName=\"p\">{`eventSymbol`}</inlineCode>{`.`}</p>\n    <p>{`Some of the events may may be requested using timed subscription (i.e. with inclusion of historical data). These are: `}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Candle`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Greeks`}</inlineCode>{` `}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TheoPrice`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`TimeAndSale`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Underlying`}</inlineCode></li>\n    </ul>\n    <p>{`For timed subscription you should also provide time to start subscription from.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`client.subscribe(\n  new CandleSubscription(\n    symbols,\n    fields,\n    1500000000000 /* from time */\n  )\n)\n`}</code></pre>\n    <p>{`NOTE: for timed events requested with custom selection of fields, an `}<inlineCode parentName=\"p\">{`eventFlags`}</inlineCode>{` field is also mandatory.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`/* Timed subscription, requesting a default set of fields */\n\nclient.subscribe(\n  new CandleSubscription(\n    symbols,\n    undefined,\n    1500000000000\n  )\n)\n\n/* Timed subscription, requesting a custom set of fields */\n\nclient.subscribe(\n  new CandleSubscription(\n    symbols,\n    ['eventSymbol', 'eventFlags', 'high', 'low'],\n    1500000000000\n  )\n)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"change-symbols-in-subscription\"\n    }}>{`Change symbols in subscription`}</h2>\n    <h3 {...{\n      \"id\": \"add-symbols\"\n    }}>{`Add symbols`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`subscription.addSymbols(['MSFT'])\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"remove-symbols\"\n    }}>{`Remove symbols`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`subscription.removeSymbols(['AAPL'])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"get-events-from-stream\"\n    }}>{`Get events from stream`}</h2>\n    <p>{`After an open subscription, you can listen to events from the stream.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const stream = subscription.getStream()\n\nstream.subscribe({\n  onSubscribe: sub => {\n    sub.request(Number.MAX_SAFE_INTEGER) // set backpressure\n  },\n  onNext: handleEvents,\n})\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`onNext`}</inlineCode>{` its event handler for process incoming events.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { Quote } from '@dxfeed/widgets-api/records/Quote'\n\nconst handleEvents = (events: Quote[]) => {\n  /* process events */\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"close-subscription-stream\"\n    }}>{`Close subscription stream`}</h2>\n    <p>{`All `}<inlineCode parentName=\"p\">{`onSubscribe`}</inlineCode>{` callbacks that are called with a subscription, you need to call the `}<inlineCode parentName=\"p\">{`subs.close`}</inlineCode>{` method to close the stream.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`stream.subscribe({\n  onSubscribe: sub => {\n    setTimeout(() => sub.close(), 5000) // close after 5s\n  },\n  onNext: console.log,\n})\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"close-connection\"\n    }}>{`Close connection`}</h2>\n    <p>{`If you need to close the web socket connection`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`client.close()\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}